########## MACROS ###########################################################################
#############################################################################################

function(conan_message MESSAGE_OUTPUT)
    if(NOT CONAN_CMAKE_SILENT_OUTPUT)
        message(${ARGV${0}})
    endif()
endfunction()


macro(conan_find_apple_frameworks FRAMEWORKS_FOUND FRAMEWORKS FRAMEWORKS_DIRS)
    if(APPLE)
        foreach(_FRAMEWORK ${FRAMEWORKS})
            # https://cmake.org/pipermail/cmake-developers/2017-August/030199.html
            find_library(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND NAME ${_FRAMEWORK} PATHS ${FRAMEWORKS_DIRS} CMAKE_FIND_ROOT_PATH_BOTH)
            if(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND)
                list(APPEND ${FRAMEWORKS_FOUND} ${CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND})
            else()
                message(FATAL_ERROR "Framework library ${_FRAMEWORK} not found in paths: ${FRAMEWORKS_DIRS}")
            endif()
        endforeach()
    endif()
endmacro()


function(conan_package_library_targets libraries package_libdir deps out_libraries out_libraries_target build_type package_name)
    unset(_CONAN_ACTUAL_TARGETS CACHE)
    unset(_CONAN_FOUND_SYSTEM_LIBS CACHE)
    foreach(_LIBRARY_NAME ${libraries})
        find_library(CONAN_FOUND_LIBRARY NAME ${_LIBRARY_NAME} PATHS ${package_libdir}
                     NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
        if(CONAN_FOUND_LIBRARY)
            conan_message(STATUS "Library ${_LIBRARY_NAME} found ${CONAN_FOUND_LIBRARY}")
            list(APPEND _out_libraries ${CONAN_FOUND_LIBRARY})
            if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
                # Create a micro-target for each lib/a found
                string(REGEX REPLACE "[^A-Za-z0-9.+_-]" "_" _LIBRARY_NAME ${_LIBRARY_NAME})
                set(_LIB_NAME CONAN_LIB::${package_name}_${_LIBRARY_NAME}${build_type})
                if(NOT TARGET ${_LIB_NAME})
                    # Create a micro-target for each lib/a found
                    add_library(${_LIB_NAME} UNKNOWN IMPORTED)
                    set_target_properties(${_LIB_NAME} PROPERTIES IMPORTED_LOCATION ${CONAN_FOUND_LIBRARY})
                    set(_CONAN_ACTUAL_TARGETS ${_CONAN_ACTUAL_TARGETS} ${_LIB_NAME})
                else()
                    conan_message(STATUS "Skipping already existing target: ${_LIB_NAME}")
                endif()
                list(APPEND _out_libraries_target ${_LIB_NAME})
            endif()
            conan_message(STATUS "Found: ${CONAN_FOUND_LIBRARY}")
        else()
            conan_message(STATUS "Library ${_LIBRARY_NAME} not found in package, might be system one")
            list(APPEND _out_libraries_target ${_LIBRARY_NAME})
            list(APPEND _out_libraries ${_LIBRARY_NAME})
            set(_CONAN_FOUND_SYSTEM_LIBS "${_CONAN_FOUND_SYSTEM_LIBS};${_LIBRARY_NAME}")
        endif()
        unset(CONAN_FOUND_LIBRARY CACHE)
    endforeach()

    if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
        # Add all dependencies to all targets
        string(REPLACE " " ";" deps_list "${deps}")
        foreach(_CONAN_ACTUAL_TARGET ${_CONAN_ACTUAL_TARGETS})
            set_property(TARGET ${_CONAN_ACTUAL_TARGET} PROPERTY INTERFACE_LINK_LIBRARIES "${_CONAN_FOUND_SYSTEM_LIBS};${deps_list}")
        endforeach()
    endif()

    set(${out_libraries} ${_out_libraries} PARENT_SCOPE)
    set(${out_libraries_target} ${_out_libraries_target} PARENT_SCOPE)
endfunction()


########### FOUND PACKAGE ###################################################################
#############################################################################################

include(FindPackageHandleStandardArgs)

conan_message(STATUS "Conan: Using autogenerated FindSFML.cmake")
set(SFML_FOUND 1)
set(SFML_VERSION "2.5.1")

find_package_handle_standard_args(SFML REQUIRED_VARS
                                  SFML_VERSION VERSION_VAR SFML_VERSION)
mark_as_advanced(SFML_FOUND SFML_VERSION)

set(SFML_COMPONENTS SFML::graphics SFML::window SFML::network SFML::audio SFML::system)

if(SFML_FIND_COMPONENTS)
    foreach(_FIND_COMPONENT ${SFML_FIND_COMPONENTS})
        list(FIND SFML_COMPONENTS "SFML::${_FIND_COMPONENT}" _index)
        if(${_index} EQUAL -1)
            conan_message(FATAL_ERROR "Conan: Component '${_FIND_COMPONENT}' NOT found in package 'SFML'")
        else()
            conan_message(STATUS "Conan: Component '${_FIND_COMPONENT}' found in package 'SFML'")
        endif()
    endforeach()
endif()

########### VARIABLES #######################################################################
#############################################################################################


set(SFML_INCLUDE_DIRS "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/include")
set(SFML_INCLUDE_DIR "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/include")
set(SFML_INCLUDES "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/include")
set(SFML_RES_DIRS )
set(SFML_DEFINITIONS )
set(SFML_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)
set(SFML_COMPILE_DEFINITIONS )
set(SFML_COMPILE_OPTIONS_LIST "" "")
set(SFML_COMPILE_OPTIONS_C "")
set(SFML_COMPILE_OPTIONS_CXX "")
set(SFML_LIBRARIES_TARGETS "") # Will be filled later, if CMake 3
set(SFML_LIBRARIES "") # Will be filled later
set(SFML_LIBS "") # Same as SFML_LIBRARIES
set(SFML_SYSTEM_LIBS )
set(SFML_FRAMEWORK_DIRS )
set(SFML_FRAMEWORKS Foundation AppKit IOKit Carbon)
set(SFML_FRAMEWORKS_FOUND "") # Will be filled later
set(SFML_BUILD_MODULES_PATHS "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib/cmake/conan-official-sfml-targets.cmake")

conan_find_apple_frameworks(SFML_FRAMEWORKS_FOUND "${SFML_FRAMEWORKS}" "${SFML_FRAMEWORK_DIRS}")

mark_as_advanced(SFML_INCLUDE_DIRS
                 SFML_INCLUDE_DIR
                 SFML_INCLUDES
                 SFML_DEFINITIONS
                 SFML_LINKER_FLAGS_LIST
                 SFML_COMPILE_DEFINITIONS
                 SFML_COMPILE_OPTIONS_LIST
                 SFML_LIBRARIES
                 SFML_LIBS
                 SFML_LIBRARIES_TARGETS)

# Find the real .lib/.a and add them to SFML_LIBS and SFML_LIBRARY_LIST
set(SFML_LIBRARY_LIST sfml-graphics sfml-window sfml-network sfml-audio sfml-system)
set(SFML_LIB_DIRS "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib")

# Gather all the libraries that should be linked to the targets (do not touch existing variables):
set(_SFML_DEPENDENCIES "${SFML_FRAMEWORKS_FOUND} ${SFML_SYSTEM_LIBS} Freetype::Freetype;stb::stb;opengl::opengl;FLAC::FLAC;OpenAL::OpenAL;Vorbis::Vorbis")

conan_package_library_targets("${SFML_LIBRARY_LIST}"  # libraries
                              "${SFML_LIB_DIRS}"      # package_libdir
                              "${_SFML_DEPENDENCIES}"  # deps
                              SFML_LIBRARIES            # out_libraries
                              SFML_LIBRARIES_TARGETS    # out_libraries_targets
                              ""                          # build_type
                              "SFML")                                      # package_name

set(SFML_LIBS ${SFML_LIBRARIES})

foreach(_FRAMEWORK ${SFML_FRAMEWORKS_FOUND})
    list(APPEND SFML_LIBRARIES_TARGETS ${_FRAMEWORK})
    list(APPEND SFML_LIBRARIES ${_FRAMEWORK})
endforeach()

foreach(_SYSTEM_LIB ${SFML_SYSTEM_LIBS})
    list(APPEND SFML_LIBRARIES_TARGETS ${_SYSTEM_LIB})
    list(APPEND SFML_LIBRARIES ${_SYSTEM_LIB})
endforeach()

# We need to add our requirements too
set(SFML_LIBRARIES_TARGETS "${SFML_LIBRARIES_TARGETS};Freetype::Freetype;stb::stb;opengl::opengl;FLAC::FLAC;OpenAL::OpenAL;Vorbis::Vorbis")
set(SFML_LIBRARIES "${SFML_LIBRARIES};Freetype::Freetype;stb::stb;opengl::opengl;FLAC::FLAC;OpenAL::OpenAL;Vorbis::Vorbis")

set(CMAKE_MODULE_PATH "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/"
			"/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib/cmake" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/"
			"/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib/cmake" ${CMAKE_PREFIX_PATH})


########### COMPONENT system VARIABLES #############################################

set(SFML_system_INCLUDE_DIRS "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/include")
set(SFML_system_INCLUDE_DIR "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/include")
set(SFML_system_INCLUDES "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/include")
set(SFML_system_LIB_DIRS "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib")
set(SFML_system_RES_DIRS )
set(SFML_system_DEFINITIONS )
set(SFML_system_COMPILE_DEFINITIONS )
set(SFML_system_COMPILE_OPTIONS_C "")
set(SFML_system_COMPILE_OPTIONS_CXX "")
set(SFML_system_LIBS sfml-system)
set(SFML_system_SYSTEM_LIBS )
set(SFML_system_FRAMEWORK_DIRS )
set(SFML_system_FRAMEWORKS )
set(SFML_system_BUILD_MODULES_PATHS "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib/cmake/conan-official-sfml-targets.cmake")
set(SFML_system_DEPENDENCIES )
set(SFML_system_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)

########### COMPONENT audio VARIABLES #############################################

set(SFML_audio_INCLUDE_DIRS "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/include")
set(SFML_audio_INCLUDE_DIR "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/include")
set(SFML_audio_INCLUDES "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/include")
set(SFML_audio_LIB_DIRS "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib")
set(SFML_audio_RES_DIRS )
set(SFML_audio_DEFINITIONS )
set(SFML_audio_COMPILE_DEFINITIONS )
set(SFML_audio_COMPILE_OPTIONS_C "")
set(SFML_audio_COMPILE_OPTIONS_CXX "")
set(SFML_audio_LIBS sfml-audio)
set(SFML_audio_SYSTEM_LIBS )
set(SFML_audio_FRAMEWORK_DIRS )
set(SFML_audio_FRAMEWORKS )
set(SFML_audio_BUILD_MODULES_PATHS "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib/cmake/conan-official-sfml-targets.cmake")
set(SFML_audio_DEPENDENCIES SFML::system FLAC::FLAC OpenAL::OpenAL Vorbis::Vorbis)
set(SFML_audio_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)

########### COMPONENT network VARIABLES #############################################

set(SFML_network_INCLUDE_DIRS "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/include")
set(SFML_network_INCLUDE_DIR "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/include")
set(SFML_network_INCLUDES "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/include")
set(SFML_network_LIB_DIRS "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib")
set(SFML_network_RES_DIRS )
set(SFML_network_DEFINITIONS )
set(SFML_network_COMPILE_DEFINITIONS )
set(SFML_network_COMPILE_OPTIONS_C "")
set(SFML_network_COMPILE_OPTIONS_CXX "")
set(SFML_network_LIBS sfml-network)
set(SFML_network_SYSTEM_LIBS )
set(SFML_network_FRAMEWORK_DIRS )
set(SFML_network_FRAMEWORKS )
set(SFML_network_BUILD_MODULES_PATHS "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib/cmake/conan-official-sfml-targets.cmake")
set(SFML_network_DEPENDENCIES SFML::system)
set(SFML_network_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)

########### COMPONENT window VARIABLES #############################################

set(SFML_window_INCLUDE_DIRS "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/include")
set(SFML_window_INCLUDE_DIR "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/include")
set(SFML_window_INCLUDES "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/include")
set(SFML_window_LIB_DIRS "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib")
set(SFML_window_RES_DIRS )
set(SFML_window_DEFINITIONS )
set(SFML_window_COMPILE_DEFINITIONS )
set(SFML_window_COMPILE_OPTIONS_C "")
set(SFML_window_COMPILE_OPTIONS_CXX "")
set(SFML_window_LIBS sfml-window)
set(SFML_window_SYSTEM_LIBS )
set(SFML_window_FRAMEWORK_DIRS )
set(SFML_window_FRAMEWORKS Foundation AppKit IOKit Carbon)
set(SFML_window_BUILD_MODULES_PATHS "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib/cmake/conan-official-sfml-targets.cmake")
set(SFML_window_DEPENDENCIES SFML::system opengl::opengl)
set(SFML_window_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)

########### COMPONENT graphics VARIABLES #############################################

set(SFML_graphics_INCLUDE_DIRS "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/include")
set(SFML_graphics_INCLUDE_DIR "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/include")
set(SFML_graphics_INCLUDES "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/include")
set(SFML_graphics_LIB_DIRS "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib")
set(SFML_graphics_RES_DIRS )
set(SFML_graphics_DEFINITIONS )
set(SFML_graphics_COMPILE_DEFINITIONS )
set(SFML_graphics_COMPILE_OPTIONS_C "")
set(SFML_graphics_COMPILE_OPTIONS_CXX "")
set(SFML_graphics_LIBS sfml-graphics)
set(SFML_graphics_SYSTEM_LIBS )
set(SFML_graphics_FRAMEWORK_DIRS )
set(SFML_graphics_FRAMEWORKS )
set(SFML_graphics_BUILD_MODULES_PATHS "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib/cmake/conan-official-sfml-targets.cmake")
set(SFML_graphics_DEPENDENCIES SFML::window Freetype::Freetype stb::stb)
set(SFML_graphics_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)


########## FIND PACKAGE DEPENDENCY ##########################################################
#############################################################################################

include(CMakeFindDependencyMacro)

if(NOT Freetype_FOUND)
    find_dependency(Freetype REQUIRED)
else()
    conan_message(STATUS "Conan: Dependency Freetype already found")
endif()

if(NOT stb_FOUND)
    find_dependency(stb REQUIRED)
else()
    conan_message(STATUS "Conan: Dependency stb already found")
endif()

if(NOT opengl_system_FOUND)
    find_dependency(opengl_system REQUIRED)
else()
    conan_message(STATUS "Conan: Dependency opengl_system already found")
endif()

if(NOT flac_FOUND)
    find_dependency(flac REQUIRED)
else()
    conan_message(STATUS "Conan: Dependency flac already found")
endif()

if(NOT OpenAL_FOUND)
    find_dependency(OpenAL REQUIRED)
else()
    conan_message(STATUS "Conan: Dependency OpenAL already found")
endif()

if(NOT Vorbis_FOUND)
    find_dependency(Vorbis REQUIRED)
else()
    conan_message(STATUS "Conan: Dependency Vorbis already found")
endif()


########## FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #######################################
#############################################################################################

########## COMPONENT system FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(SFML_system_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(SFML_system_FRAMEWORKS_FOUND "${SFML_system_FRAMEWORKS}" "${SFML_system_FRAMEWORK_DIRS}")

set(SFML_system_LIB_TARGETS "")
set(SFML_system_NOT_USED "")
set(SFML_system_LIBS_FRAMEWORKS_DEPS ${SFML_system_FRAMEWORKS_FOUND} ${SFML_system_SYSTEM_LIBS} ${SFML_system_DEPENDENCIES})
conan_package_library_targets("${SFML_system_LIBS}"
                              "${SFML_system_LIB_DIRS}"
                              "${SFML_system_LIBS_FRAMEWORKS_DEPS}"
                              SFML_system_NOT_USED
                              SFML_system_LIB_TARGETS
                              ""
                              "SFML_system")

set(SFML_system_LINK_LIBS ${SFML_system_LIB_TARGETS} ${SFML_system_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/"
			"/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib/cmake" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/"
			"/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib/cmake" ${CMAKE_PREFIX_PATH})

########## COMPONENT audio FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(SFML_audio_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(SFML_audio_FRAMEWORKS_FOUND "${SFML_audio_FRAMEWORKS}" "${SFML_audio_FRAMEWORK_DIRS}")

set(SFML_audio_LIB_TARGETS "")
set(SFML_audio_NOT_USED "")
set(SFML_audio_LIBS_FRAMEWORKS_DEPS ${SFML_audio_FRAMEWORKS_FOUND} ${SFML_audio_SYSTEM_LIBS} ${SFML_audio_DEPENDENCIES})
conan_package_library_targets("${SFML_audio_LIBS}"
                              "${SFML_audio_LIB_DIRS}"
                              "${SFML_audio_LIBS_FRAMEWORKS_DEPS}"
                              SFML_audio_NOT_USED
                              SFML_audio_LIB_TARGETS
                              ""
                              "SFML_audio")

set(SFML_audio_LINK_LIBS ${SFML_audio_LIB_TARGETS} ${SFML_audio_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/"
			"/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib/cmake" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/"
			"/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib/cmake" ${CMAKE_PREFIX_PATH})

########## COMPONENT network FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(SFML_network_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(SFML_network_FRAMEWORKS_FOUND "${SFML_network_FRAMEWORKS}" "${SFML_network_FRAMEWORK_DIRS}")

set(SFML_network_LIB_TARGETS "")
set(SFML_network_NOT_USED "")
set(SFML_network_LIBS_FRAMEWORKS_DEPS ${SFML_network_FRAMEWORKS_FOUND} ${SFML_network_SYSTEM_LIBS} ${SFML_network_DEPENDENCIES})
conan_package_library_targets("${SFML_network_LIBS}"
                              "${SFML_network_LIB_DIRS}"
                              "${SFML_network_LIBS_FRAMEWORKS_DEPS}"
                              SFML_network_NOT_USED
                              SFML_network_LIB_TARGETS
                              ""
                              "SFML_network")

set(SFML_network_LINK_LIBS ${SFML_network_LIB_TARGETS} ${SFML_network_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/"
			"/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib/cmake" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/"
			"/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib/cmake" ${CMAKE_PREFIX_PATH})

########## COMPONENT window FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(SFML_window_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(SFML_window_FRAMEWORKS_FOUND "${SFML_window_FRAMEWORKS}" "${SFML_window_FRAMEWORK_DIRS}")

set(SFML_window_LIB_TARGETS "")
set(SFML_window_NOT_USED "")
set(SFML_window_LIBS_FRAMEWORKS_DEPS ${SFML_window_FRAMEWORKS_FOUND} ${SFML_window_SYSTEM_LIBS} ${SFML_window_DEPENDENCIES})
conan_package_library_targets("${SFML_window_LIBS}"
                              "${SFML_window_LIB_DIRS}"
                              "${SFML_window_LIBS_FRAMEWORKS_DEPS}"
                              SFML_window_NOT_USED
                              SFML_window_LIB_TARGETS
                              ""
                              "SFML_window")

set(SFML_window_LINK_LIBS ${SFML_window_LIB_TARGETS} ${SFML_window_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/"
			"/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib/cmake" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/"
			"/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib/cmake" ${CMAKE_PREFIX_PATH})

########## COMPONENT graphics FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(SFML_graphics_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(SFML_graphics_FRAMEWORKS_FOUND "${SFML_graphics_FRAMEWORKS}" "${SFML_graphics_FRAMEWORK_DIRS}")

set(SFML_graphics_LIB_TARGETS "")
set(SFML_graphics_NOT_USED "")
set(SFML_graphics_LIBS_FRAMEWORKS_DEPS ${SFML_graphics_FRAMEWORKS_FOUND} ${SFML_graphics_SYSTEM_LIBS} ${SFML_graphics_DEPENDENCIES})
conan_package_library_targets("${SFML_graphics_LIBS}"
                              "${SFML_graphics_LIB_DIRS}"
                              "${SFML_graphics_LIBS_FRAMEWORKS_DEPS}"
                              SFML_graphics_NOT_USED
                              SFML_graphics_LIB_TARGETS
                              ""
                              "SFML_graphics")

set(SFML_graphics_LINK_LIBS ${SFML_graphics_LIB_TARGETS} ${SFML_graphics_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/"
			"/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib/cmake" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/"
			"/Users/pierrejeannin/.conan/data/sfml/2.5.1/_/_/package/bfa58ab78ba36e7a5080e0eed477f84e99709490/lib/cmake" ${CMAKE_PREFIX_PATH})


########## TARGETS ##########################################################################
#############################################################################################

########## COMPONENT system TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET SFML::system)
        add_library(SFML::system INTERFACE IMPORTED)
        set_target_properties(SFML::system PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${SFML_system_INCLUDE_DIRS}")
        set_target_properties(SFML::system PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${SFML_system_LIB_DIRS}")
        set_target_properties(SFML::system PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${SFML_system_LINK_LIBS};${SFML_system_LINKER_FLAGS_LIST}")
        set_target_properties(SFML::system PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${SFML_system_COMPILE_DEFINITIONS}")
        set_target_properties(SFML::system PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${SFML_system_COMPILE_OPTIONS_C};${SFML_system_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## COMPONENT audio TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET SFML::audio)
        add_library(SFML::audio INTERFACE IMPORTED)
        set_target_properties(SFML::audio PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${SFML_audio_INCLUDE_DIRS}")
        set_target_properties(SFML::audio PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${SFML_audio_LIB_DIRS}")
        set_target_properties(SFML::audio PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${SFML_audio_LINK_LIBS};${SFML_audio_LINKER_FLAGS_LIST}")
        set_target_properties(SFML::audio PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${SFML_audio_COMPILE_DEFINITIONS}")
        set_target_properties(SFML::audio PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${SFML_audio_COMPILE_OPTIONS_C};${SFML_audio_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## COMPONENT network TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET SFML::network)
        add_library(SFML::network INTERFACE IMPORTED)
        set_target_properties(SFML::network PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${SFML_network_INCLUDE_DIRS}")
        set_target_properties(SFML::network PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${SFML_network_LIB_DIRS}")
        set_target_properties(SFML::network PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${SFML_network_LINK_LIBS};${SFML_network_LINKER_FLAGS_LIST}")
        set_target_properties(SFML::network PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${SFML_network_COMPILE_DEFINITIONS}")
        set_target_properties(SFML::network PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${SFML_network_COMPILE_OPTIONS_C};${SFML_network_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## COMPONENT window TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET SFML::window)
        add_library(SFML::window INTERFACE IMPORTED)
        set_target_properties(SFML::window PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${SFML_window_INCLUDE_DIRS}")
        set_target_properties(SFML::window PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${SFML_window_LIB_DIRS}")
        set_target_properties(SFML::window PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${SFML_window_LINK_LIBS};${SFML_window_LINKER_FLAGS_LIST}")
        set_target_properties(SFML::window PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${SFML_window_COMPILE_DEFINITIONS}")
        set_target_properties(SFML::window PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${SFML_window_COMPILE_OPTIONS_C};${SFML_window_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## COMPONENT graphics TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET SFML::graphics)
        add_library(SFML::graphics INTERFACE IMPORTED)
        set_target_properties(SFML::graphics PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${SFML_graphics_INCLUDE_DIRS}")
        set_target_properties(SFML::graphics PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${SFML_graphics_LIB_DIRS}")
        set_target_properties(SFML::graphics PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${SFML_graphics_LINK_LIBS};${SFML_graphics_LINKER_FLAGS_LIST}")
        set_target_properties(SFML::graphics PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${SFML_graphics_COMPILE_DEFINITIONS}")
        set_target_properties(SFML::graphics PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${SFML_graphics_COMPILE_OPTIONS_C};${SFML_graphics_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## GLOBAL TARGET ####################################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    if(NOT TARGET SFML::SFML)
        add_library(SFML::SFML INTERFACE IMPORTED)
    endif()
    set_property(TARGET SFML::SFML APPEND PROPERTY
                 INTERFACE_LINK_LIBRARIES "${SFML_COMPONENTS}")
endif()

########## BUILD MODULES ####################################################################
#############################################################################################
########## COMPONENT system BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${SFML_system_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
########## COMPONENT audio BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${SFML_audio_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
########## COMPONENT network BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${SFML_network_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
########## COMPONENT window BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${SFML_window_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
########## COMPONENT graphics BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${SFML_graphics_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
