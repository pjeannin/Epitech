#!/usr/bin/python3

##
## EPITECH PROJECT, 2021
## B-MAT-400-STG-4-1-201yams-pierre.jeannin
## File description:
## 201yams
##

import sys

def factorial(n):
    if n == 0:
        return 1
    else:
        F = 1
        for k in range(2,n+1):
            F = F * k
        return F

def binomialeCoef(n, k):
    return (factorial(n) / (factorial(k) * factorial(n - k)))

def binomiale(n, k, p):
    return binomialeCoef(n, k) * pow(p, k) * pow(1 - p, n - k)

def yams(wanted, dices):
    n = 0
    k = 0
    res = 0
    for dice in dices:
        if dice != wanted or dice == 0:
            n += 1
    k = n
    if k == 0:
            res = 100
    else:
        res = round(binomiale(n, k, 1/6) * 100, 2)
    if res - int(res) == 0:
        res = str(int(res)) + ".00"
    print(wanted, "yams:", res, end='')
    print("%")

def four(wanted, dices):
    n = 0
    k = 0
    for dice in dices:
        if dice != wanted or dice == 0:
            n += 1
    k = n
    if k <= 1:
        res = 100
    else:
        res = round((binomiale(n, k, 1/6) + binomiale(n, k - 1, 1/6)) * 100, 2)
    if res - int(res) == 0:
        res = str(int(res)) + ".00"
    print(wanted, "four-of-a-kind:", res, end='')
    print("%")

def three(wanted, dices):
    n = 0
    k = 0
    for dice in dices:
        if dice != wanted or dice == 0:
            n += 1
    k = n
    if k <= 2:
        res = 100
    else:
        res = round((binomiale(n, k, 1/6) + binomiale(n, k - 1, 1/6) + binomiale(n, k - 2, 1/6)) * 100, 2)
    if res - int(res) == 0:
        res = str(int(res)) + ".00"
    print(wanted, "three-of-a-kind:", res, end='')
    print("%")

def pair(wanted, dices):
    n = 0
    k = 0
    for dice in dices:
        if dice != wanted or dice == 0:
            n += 1
    k = n
    if k <= 3:
        res = 100
    else:
        res = round((binomiale(n, k, 1/6) + binomiale(n, k - 1, 1/6) + binomiale(n, k - 2, 1/6) + binomiale(n, k - 3, 1/6)) * 100, 2)
    if res - int(res) == 0:
        res = str(int(res)) + ".00"
    print(wanted, "pair:", res, end='')
    print("%")

def full(wanted, otherWanted, dices):
    countFirst = 0
    countSecond = 0
    for dice in dices:
        if dice == wanted and countFirst < 3:
            countFirst += 1
        elif dice == otherWanted and countSecond < 2:
            countSecond += 1
    res = binomialeCoef(2 - countSecond + 3 - countFirst, 3 - countFirst) * binomialeCoef(2 - countSecond, 2 - countSecond) / pow(6, 2 - countSecond + 3 - countFirst)
    res  = round(res * 100, 2)
    if res - int(res) == 0:
        res = str(int(res)) + ".00"
    print(wanted, "full of", otherWanted, end='')
    print(":", res, end='')
    print("%")

def straight(wanted, dices):
    n = 5
    for i in range(5):
        if wanted - i in dices:
            n -= 1
    k = n
    if k == 0:
        res = 100
    else:
        res = round(binomiale(n, k, 1/6) * 100, 2)
    if res - int(res) == 0:
        res = str(int(res)) + ".00"
    print(wanted, "straight:", res, end='')
    print("%")


def checkCombinaison(combination):
    if int(combination[-1]) < 1 or int(combination[-1]) > 6:
        b = 4/0
    if not(len(combination) == 6 and "pair_" in combination) and not(len(combination) == 7 and "three_" in combination) and not(len(combination) == 6 and "four_" in combination) and not(len(combination) == 10 and "straight_" in combination) and not(len(combination) == 6 and "yams_" in combination) and not(len(combination) == 8 and "full_" in combination):
        b = 4/0
    if "full" in combination:
        if int(combination[5]) < 1 or int(combination[5]) > 6 or combination[6] != '_' or int(combination[5]) == int(combination[-1]):
            b = 4/0
    if "straight" in combination:
        if int(combination[-1]) != 6 and int(combination[-1]) != 5:
            b = 4/0

if len(sys.argv) == 2 and sys.argv[1] == "-h":
    print("USAGE\n    ./201yams d1 d2 d3 d4 d5 c\n\nDESCRIPTION\n    d1      value of the first die (0 if not thrown)\n    d2      value of the second die (0 if not thrown)\n    d3      value of the third die (0 if not thrown)\n    d4      value of the fourth die (0 if not thrown)\n    d5      value of the fifth die (0 if not thrown)\n    c       expected combination")
    exit(0)
elif len(sys.argv) != 7:
    print("Too many arguments.")
    exit(84)
try:
    propa = 0
    dices = [int(sys.argv[1]), int(sys.argv[2]), int(sys.argv[3]), int(sys.argv[4]), int(sys.argv[5])]
    for dice in dices:
        if dice < 0 or dice > 6:
            b = 4/0
    mode = sys.argv[6]
    checkCombinaison(mode)
    print("Chances to get a ", end='')
    if "yams" in mode:
        yams(int(mode[5]), dices)
    elif "four" in mode:
        four(int(mode[5]), dices)
    elif "three" in mode:
        three(int(mode[6]), dices)
    elif "pair" in mode:
        pair(int(mode[5]), dices)
    elif "full" in mode:
        full(int(mode[5]), int(mode[7]), dices)
    else:
        straight(int(mode[9]), dices)

except:
    print("Oops ! Something went wrong. Try again.")
    exit(84)
exit(0)